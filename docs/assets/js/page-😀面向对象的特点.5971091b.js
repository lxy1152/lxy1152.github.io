(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{727:function(t,a,s){"use strict";s.r(a);var v=s(1),_=Object(v.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"面向对象的特点包括哪些"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#面向对象的特点包括哪些"}},[t._v("#")]),t._v(" 面向对象的特点包括哪些？")]),t._v(" "),s("h3",{attrs:{id:"封装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#封装"}},[t._v("#")]),t._v(" 封装")]),t._v(" "),s("p",[t._v("通常认为封装是把数据和操作数据的方法绑定起来，想要访问数据只能通过已定义的接口来进行访问。面向对象的本质就是将现实世界描绘成一系列完全自治、封闭的对象。可以说封装就是隐藏一切可隐藏的东西，只向外界提供最简单的编程接口。")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("不一定都需要封装")]),t._v(" "),s("p",[t._v("对于绝大部分的类而言，它们所包含的成员变量都不可以给 "),s("code",[t._v("public")]),t._v(" 权限，否则封装就失去了意义。但是如果是内部类，可以特殊一点。")])]),t._v(" "),s("h3",{attrs:{id:"继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#继承"}},[t._v("#")]),t._v(" 继承")]),t._v(" "),s("p",[t._v("继承是从已有类得到继承信息创建新类的过程。提供继承信息的类被称为父类（超类、基类），得到继承信息的类被称为子类（派生类）。继承让变化中的软件系统有了一定的延续性，同时继承也是封装程序中可变因素的重要手段。")]),t._v(" "),s("h3",{attrs:{id:"多态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多态"}},[t._v("#")]),t._v(" 多态")]),t._v(" "),s("p",[t._v("多态性是指允许不同子类型的对象对同一消息作出不同的响应，简单的说就是用同样的对象引用调用同样的方法但是做了不同的事情。实现多态的关键在于：")]),t._v(" "),s("ul",[s("li",[t._v("继承")]),t._v(" "),s("li",[t._v("重写")]),t._v(" "),s("li",[t._v("父类引用指向子类对象（如 "),s("code",[t._v("Parent p = new Child()")]),t._v("）")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("多态的前绑定和后绑定")]),t._v(" "),s("p",[t._v("前绑定指指编译时的多态性，通过方法重载可以实现，后绑定指指运行时的多态性，通过方法重写可以实现。")])]),t._v(" "),s("h3",{attrs:{id:"抽象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#抽象"}},[t._v("#")]),t._v(" 抽象")]),t._v(" "),s("p",[t._v("抽象是将一类对象的共同特征总结出来构造类的过程，包括数据抽象和行为抽象两方面。抽象只关注对象有哪些属性和行为，并不关注这些行为的细节是什么。")])])}),[],!1,null,null,null);a.default=_.exports}}]);