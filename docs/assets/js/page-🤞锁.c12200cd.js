(window.webpackJsonp=window.webpackJsonp||[]).push([[90],{754:function(t,e,a){"use strict";a.r(e);var r=a(1),s=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"什么是共享锁和排他锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是共享锁和排他锁"}},[t._v("#")]),t._v(" 什么是共享锁和排他锁？")]),t._v(" "),a("h3",{attrs:{id:"共享锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#共享锁"}},[t._v("#")]),t._v(" 共享锁")]),t._v(" "),a("p",[t._v("使用方式为："),a("code",[t._v("select * from table lock in share mode")]),t._v("，表示自身可以读，其他事务也可以读（也可以继续加共享锁），但是其他事务无法修改。")]),t._v(" "),a("h3",{attrs:{id:"排它锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#排它锁"}},[t._v("#")]),t._v(" 排它锁")]),t._v(" "),a("p",[t._v("使用方式为："),a("code",[t._v("select * from table for update")]),t._v("，表示自身可以进行增删改查，其他事务无法进行任何操作。排它锁是一种悲观锁，更新、插入、删除默认加排它锁，查询默认不加锁。")]),t._v(" "),a("h2",{attrs:{id:"什么是-next-key-lock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是-next-key-lock"}},[t._v("#")]),t._v(" 什么是 Next-Key Lock？"),a("Badge",{attrs:{text:"重点",type:"error"}})],1),t._v(" "),a("p",[t._v("InnoDB 有三种锁的方式：")]),t._v(" "),a("ul",[a("li",[t._v("Record Lock：对某一行上锁")]),t._v(" "),a("li",[t._v("Gap Lock：间隙锁，锁定一个范围，但不包括记录本身，目的在于防止同一事务的两次读出现幻读")]),t._v(" "),a("li",[t._v("Next-Key Lock：上面两种锁的组合，它会锁定一个范围，并且锁定记录本身，主要目的是为了解决幻读")])]),t._v(" "),a("p",[t._v("假设某一个时刻，某张表的 id 只有两个值，分别为 10 和 14。如果查询条件为 id > 9，并且某个事务新插入了一条 id = 12 的数据，使用前两种锁将导致幻读。")])])}),[],!1,null,null,null);e.default=s.exports}}]);