(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{745:function(a,s,t){"use strict";t.r(s);var e=t(1),n=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"类的生命周期"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类的生命周期"}},[a._v("#")]),a._v(" 类的生命周期")]),a._v(" "),t("h3",{attrs:{id:"介绍一下类的生命周期"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#介绍一下类的生命周期"}},[a._v("#")]),a._v(" 介绍一下类的生命周期？")]),a._v(" "),t("div",{staticClass:"custom-block center"},[t("p",[t("img",{attrs:{src:"https://i.loli.net/2021/07/30/EWL6m9ayd8rfe1z.png",alt:"类生命周期.jpg"}})])]),a._v(" "),t("h4",{attrs:{id:"加载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#加载"}},[a._v("#")]),a._v(" "),t("strong",[a._v("加载")])]),a._v(" "),t("p",[a._v("将字节码文件加载到内存中，并将这些静态数据转换成方法区中的运行时数据结构，在堆中生成一个代表这个类的 java.lang.Class 对象，作为方法区数据的访问入口。")]),a._v(" "),t("h4",{attrs:{id:"验证"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#验证"}},[a._v("#")]),a._v(" "),t("strong",[a._v("验证")])]),a._v(" "),t("p",[a._v("确保字节码文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。")]),a._v(" "),t("h4",{attrs:{id:"准备"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#准备"}},[a._v("#")]),a._v(" "),t("strong",[a._v("准备")])]),a._v(" "),t("p",[a._v("类变量是被 "),t("code",[a._v("static")]),a._v(" 修饰的变量，准备阶段为类变量分配内存并设置初始值，使用的是方法区的内存。实例变量不会在这阶段分配内存，它会在对象实例化时随着对象一起被分配在堆中。应该注意到，实例化不是类加载的一个过程，类加载发生在所有实例化操作之前，并且类加载只进行一次，实例化可以进行多次。初始值一般为 0 值，例如下面的类变量 "),t("code",[a._v("value")]),a._v(" 被初始化为 0 而不是 123。")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" value "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("123")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("如果类变量是常量，那么它将初始化为表达式所定义的值而不是 0。例如下面的常量 value 被初始化为 123 而不是 0。")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" value "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("123")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("h4",{attrs:{id:"解析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解析"}},[a._v("#")]),a._v(" "),t("strong",[a._v("解析")])]),a._v(" "),t("p",[a._v("将常量池的符号引用替换为直接引用的过程。其中解析过程在某些情况下可以在初始化阶段之后再开始，这是为了支持 Java 的动态绑定。")]),a._v(" "),t("h4",{attrs:{id:"初始化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#初始化"}},[a._v("#")]),a._v(" "),t("strong",[a._v("初始化")])]),a._v(" "),t("p",[a._v("初始化阶段才真正开始执行类中定义的 Java 程序代码。初始化阶段是虚拟机执行类构造器 "),t("code",[a._v("<clinit>()")]),a._v(" 方法的过程。在准备阶段，类变量已经赋过一次系统要求的初始值，而在初始化阶段，根据程序员通过程序制定的主观计划去初始化类变量和其它资源。"),t("code",[a._v("<clinit>()")]),a._v(" 是由编译器自动收集类中所有类变量的赋值动作和静态语句块中的语句合并产生的，编译器收集的顺序由语句在源文件中出现的顺序决定。特别注意的是，静态语句块只能访问到定义在它之前的类变量，定义在它之后的类变量只能赋值，不能访问。例如以下代码：")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Main")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        i "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 提示非法前向引用")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br")])]),t("p",[a._v("由于父类会优先加载，所以子类访问父类的静态变量是没有问题的。")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Main")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Parent")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" parent "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            parent "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Child")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("extends")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Parent")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" child "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" parent"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Child")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("child"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br")])]),t("p",[a._v("虚拟机会保证一个类的 "),t("code",[a._v("<clinit>()")]),a._v(" 方法在多线程环境下被正确的加锁和同步，如果多个线程同时初始化一个类，只会有一个线程执行这个类的 "),t("code",[a._v("<clinit>()")]),a._v(" 方法，其它线程都会阻塞等待，直到活动线程执行 "),t("code",[a._v("<clinit>()")]),a._v(" 方法完毕。如果在一个类的 "),t("code",[a._v("<clinit>()")]),a._v(" 方法中有耗时的操作，就可能造成多个线程阻塞，在实际过程中此种阻塞可能很会隐蔽。")]),a._v(" "),t("h3",{attrs:{id:"说一下类的初始化时机"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#说一下类的初始化时机"}},[a._v("#")]),a._v(" 说一下类的初始化时机？"),t("Badge",{attrs:{text:"重点",type:"error"}})],1),a._v(" "),t("p",[a._v("类是在运行期间第一次使用时动态加载的，而不是一次性加载所有类。因为如果一次性加载，那么会占用很多的内存。")]),a._v(" "),t("h4",{attrs:{id:"主动引用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#主动引用"}},[a._v("#")]),a._v(" "),t("strong",[a._v("主动引用")])]),a._v(" "),t("p",[a._v("虚拟机规范中并没有强制约束何时进行加载，但是规范严格规定了有且只有下列五种情况必须对类进行初始化（加载、验证、准备都会随之发生）：")]),a._v(" "),t("ul",[t("li",[a._v("遇到 "),t("code",[a._v("new")]),a._v("、"),t("code",[a._v("getstatic")]),a._v("、"),t("code",[a._v("putstatic")]),a._v("、"),t("code",[a._v("invokestatic")]),a._v(" 这四条字节码指令时，如果类没有进行过初始化，则必须先触发其初始化，最常见的生成这 4 条指令的场景是：\n"),t("ul",[t("li",[a._v("使用 "),t("code",[a._v("new")]),a._v(" 关键字实例化对象")]),a._v(" "),t("li",[a._v("读取或设置一个类的静态字段（用 "),t("code",[a._v("final")]),a._v(" 修饰，已在编译期把结果放入常量池的静态字段除外）")]),a._v(" "),t("li",[a._v("调用一个类的静态方法")])])]),a._v(" "),t("li",[a._v("使用 "),t("code",[a._v("java.lang.reflect")]),a._v(" 包的方法对类进行反射调用的时候，如果类没有进行初始化，则需要先触发其初始化")]),a._v(" "),t("li",[a._v("当初始化一个类的时候，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化")]),a._v(" "),t("li",[a._v("当虚拟机启动时，用户需要指定一个要执行的主类（包含 "),t("code",[a._v("main()")]),a._v(" 方法的那个类），虚拟机会先初始化这个主类")])]),a._v(" "),t("h4",{attrs:{id:"被动引用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#被动引用"}},[a._v("#")]),a._v(" "),t("strong",[a._v("被动引用")])]),a._v(" "),t("p",[a._v("除了上面提到的主动引用方式以外，剩下所有的方式都是被动引用，比如：")]),a._v(" "),t("ul",[t("li",[a._v("通过子类引用父类的静态字段，不会导致子类初始化")]),a._v(" "),t("li",[a._v("通过数组定义来引用类，不会触发此类的初始化，该过程会对数组类进行初始化，数组类是一个由虚拟机自动生成的、直接继承自 Object 的子类，其中包含了数组的属性和方法")]),a._v(" "),t("li",[a._v("常量在编译阶段会存入调用类的常量池中，本质上并没有直接引用到定义常量的类，因此不会触发定义常量的类的初始化")])]),a._v(" "),t("h3",{attrs:{id:"new-关键字是如何实现的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#new-关键字是如何实现的"}},[a._v("#")]),a._v(" new 关键字是如何实现的？"),t("Badge",{attrs:{text:"重点",type:"error"}})],1),a._v(" "),t("h4",{attrs:{id:"校验"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#校验"}},[a._v("#")]),a._v(" "),t("strong",[a._v("校验")])]),a._v(" "),t("p",[a._v("检查这个指令的参数是否能在常量池中定位到一个符号引用，并检查这个符号引用代表的类是否已经被虚拟机加载过、解析、和初始化过。如果没有，就必须先执行类的加载过程。如果有，则根据关键 "),t("code",[a._v("new")]),a._v(" 后紧跟的构造方法去创建一个类的对象出来。")]),a._v(" "),t("h4",{attrs:{id:"分配内存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分配内存"}},[a._v("#")]),a._v(" "),t("strong",[a._v("分配内存")])]),a._v(" "),t("p",[a._v("为新生的对象分配内存。对象所需内存大小在类加载完成后就可以完全确定。为对象分配空间的任务等同于把一块大小确定的内存从 Java 堆中划分出来。除了划分可用空间以外还需要考虑并发状态下分配内存的冲突问题，这个时候有两种解决办法：一是采用 CAS + 失败重试，二是预先分配一小块的 TLAB 内存。")]),a._v(" "),t("h4",{attrs:{id:"初始化-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#初始化-2"}},[a._v("#")]),a._v(" "),t("strong",[a._v("初始化")])]),a._v(" "),t("p",[a._v("内存分配完成后，虚拟机需要将分配到的内存空间都初始化为零值（不包括对象头），这一操作保证了对象的实例字段在 Java 代码中可以不赋初始值就可以直接使用。")]),a._v(" "),t("h4",{attrs:{id:"设置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设置"}},[a._v("#")]),a._v(" "),t("strong",[a._v("设置")])]),a._v(" "),t("p",[a._v("接下来虚拟机要对对象进行必要的设置，例如对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、GC 的对象分代年龄等信息。这新信息储存在对象头中之中")]),a._v(" "),t("h4",{attrs:{id:"初始化赋值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#初始化赋值"}},[a._v("#")]),a._v(" "),t("strong",[a._v("初始化赋值")])]),a._v(" "),t("p",[a._v("在上面的工作都完成后，从虚拟机的角度来看，一个新的对象已经产生，但从 Java 的角度来看，对象的创建才刚刚开始，因为初始化方法还没有执行，所有的字段还都为零。因此在执行完 "),t("code",[a._v("new")]),a._v(" 指令之后会接着执行 "),t("code",[a._v("<init>")]),a._v(" 方法，把对象按照程序员的意愿进行初始化，这样一个真正可用的对象才算创建完成。所谓程序员的意愿，就是 "),t("code",[a._v("new")]),a._v(" 对象的时候指定的构造方法。")]),a._v(" "),t("h3",{attrs:{id:"除了使用-new-还有哪些方式能够创建对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#除了使用-new-还有哪些方式能够创建对象"}},[a._v("#")]),a._v(" 除了使用 new 还有哪些方式能够创建对象？")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("Class.forName().newInstance()")])]),a._v(" "),t("li",[t("code",[a._v("xx.class.getConstructor().newInstance()")])]),a._v(" "),t("li",[a._v("反序列化")]),a._v(" "),t("li",[t("code",[a._v("clone()")])])]),a._v(" "),t("h2",{attrs:{id:"类加载器与双亲委派机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类加载器与双亲委派机制"}},[a._v("#")]),a._v(" 类加载器与双亲委派机制")]),a._v(" "),t("h3",{attrs:{id:"有哪些类加载器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#有哪些类加载器"}},[a._v("#")]),a._v(" 有哪些类加载器？"),t("Badge",{attrs:{text:"重点",type:"error"}})],1),a._v(" "),t("p",[a._v("从 Java 虚拟机的角度来讲，只存在以下两种不同的类加载器：")]),a._v(" "),t("ul",[t("li",[a._v("启动类加载器（Bootstrap ClassLoader）：使用 C++ 实现，是虚拟机自身的一部分")]),a._v(" "),t("li",[a._v("所有其它类的加载器：使用 Java 实现，独立于虚拟机，继承自抽象类 "),t("code",[a._v("java.lang.ClassLoader")])])]),a._v(" "),t("p",[a._v("从 Java 开发人员的角度看，类加载器可以划分得更细致一些：")]),a._v(" "),t("ul",[t("li",[a._v("启动类加载器（Bootstrap ClassLoader）")])]),a._v(" "),t("p",[a._v("这个加载器负责将存放在 "),t("code",[a._v("<JRE_HOME>\\lib")]),a._v(" 目录中的，或者被 "),t("code",[a._v("-Xbootclasspath")]),a._v(" 参数所指定的路径中的，并且是虚拟机识别的（仅按照文件名识别，如 "),t("code",[a._v("rt.jar")]),a._v("，名字不符合的类库即使放在 "),t("code",[a._v("lib")]),a._v(" 目录中也不会被加载）类库加载到虚拟机内存中。启动类加载器无法被 Java 程序直接引用，开发人员在编写自定义的类加载器时，如果需要把加载请求委派给启动类加载器，直接使用 "),t("code",[a._v("null")]),a._v(" 代替即可。")]),a._v(" "),t("ul",[t("li",[a._v("扩展类加载器（Extension ClassLoader）")])]),a._v(" "),t("p",[a._v("这个类加载器是由 "),t("code",[a._v("ExtClassLoader")]),a._v(" 类实现的。它负责将 "),t("code",[a._v("<JAVA_HOME>/lib/ext")]),a._v(" 或者被 "),t("code",[a._v("java.ext.dir")]),a._v(" 系统变量所指定路径中的所有类库加载到内存中，开发者可以直接使用扩展类加载器。")]),a._v(" "),t("ul",[t("li",[a._v("应用程序类加载器（Application ClassLoader）")])]),a._v(" "),t("p",[a._v("这个类加载器是由 "),t("code",[a._v("AppClassLoader")]),a._v(" 类实现的。由于这个类加载器是 "),t("code",[a._v("ClassLoader")]),a._v(" 中的 "),t("code",[a._v("getSystemClassLoader()")]),a._v(" 方法的返回值，因此一般也称为系统类加载器。它负责加载用户类路径（ClassPath）上所指定的类库，开发人员可以直接使用这个类加载器，如果应用程序中没有自定义过自己的类加载器，那么一般情况下这个加载器就是程序中默认使用的类加载器。")]),a._v(" "),t("h3",{attrs:{id:"什么是双亲委派机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是双亲委派机制"}},[a._v("#")]),a._v(" 什么是双亲委派机制？"),t("Badge",{attrs:{text:"重点",type:"error"}})],1),a._v(" "),t("p",[a._v("双亲委派机制是 JVM 在加载类时默认使用的机制。当一个类加载器接收到类加载任务时，会交给自己的父加载器去完成，所以最终所有的加载任务都会传递到最顶层的 "),t("code",[a._v("BootstrapClassLoader")]),a._v(" 上。只有父加载器无法完成加载任务时，才会尝试自己来加载。")]),a._v(" "),t("div",{staticClass:"custom-block center"},[t("p",[t("img",{attrs:{src:"https://i.loli.net/2021/07/30/rOyfzTB1xecZ3Sp.png",alt:"双亲委派机制.jpg"}})])]),a._v(" "),t("h3",{attrs:{id:"为什么需要打破双亲委派机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要打破双亲委派机制"}},[a._v("#")]),a._v(" 为什么需要打破双亲委派机制？")]),a._v(" "),t("p",[a._v("以 MySQL 驱动为例：")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("forName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"com.mysql.cj.jdbc.Driver"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Connection")]),a._v(" conn "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("DriverManager")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getConnection")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"url"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"root"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"password"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br")])]),t("p",[t("code",[a._v("Driver")]),a._v(" 接口（较早的 MySQL 驱动中提供的是 "),t("code",[a._v("com.mysql.jdbc.Driver")]),a._v("），定义在 "),t("code",[a._v("java.sql")]),a._v(" 包中，包所在的位置是："),t("code",[a._v("jdk\\jre\\lib\\rt.jar")]),a._v("。"),t("code",[a._v("java.sql")]),a._v(" 包中还提供了其它相应的类和接口比如管理驱动的类："),t("code",[a._v("DriverManager")]),a._v(" 类。")]),a._v(" "),t("p",[a._v("很明显 "),t("code",[a._v("java.sql")]),a._v(" 包是由 BootstrapClassloader 加载器加载的，而接口的实现类是由第三方实现的，由 ApplicationClassLoader 加载器进行加载的，现在的问题是 "),t("code",[a._v("DriverManager")]),a._v(" 在获取链接的时候必然要加载到 "),t("code",[a._v("com.mysql.jdbc.Driver")]),a._v(" 类。也就是说由 BootstrapClassloader 加载的类使用了由 ApplicationClassLoader 加载的类，很明显和双亲委托机制的原理相悖。所以需要打破双亲委派机制对类进行加载。")]),a._v(" "),t("h3",{attrs:{id:"怎么打破双亲委派机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#怎么打破双亲委派机制"}},[a._v("#")]),a._v(" 怎么打破双亲委派机制？")]),a._v(" "),t("h4",{attrs:{id:"实现自定义的类加载器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现自定义的类加载器"}},[a._v("#")]),a._v(" "),t("strong",[a._v("实现自定义的类加载器")])]),a._v(" "),t("p",[a._v("Tomcat 在打破双亲委派机制时使用的就是这种方式。实现 "),t("code",[a._v("ClassLoader")]),a._v(" 接口，重写 "),t("code",[a._v("loadClass()")]),a._v(" 和 "),t("code",[a._v("findClass()")]),a._v(" 方法，重点是重写 "),t("code",[a._v("loadClass()")]),a._v(" 方法。如果是希望在不打破双亲委派机制的情况下实现类加载器，那么只重写 "),t("code",[a._v("findClass()")]),a._v(" 就可以了。")]),a._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[a._v("为什么要重写 loadClass() 方法")]),a._v(" "),t("p",[a._v("查看 "),t("code",[a._v("loadClass()")]),a._v(" 方法的源码，发现它会通过 "),t("code",[a._v("parent.loadClass()")]),a._v(" 去请求父加载器加载类，如果父加载器加载不了，那么再通过自身的 "),t("code",[a._v("findClass()")]),a._v(" 对类进行加载。\n由于 "),t("code",[a._v("ClassLoader")]),a._v(" 接口中对 "),t("code",[a._v("loadClass()")]),a._v(" 提供了默认实现，即使用双亲委派机制来加载类，因此如果希望打破双亲委派机制，那么必须重写这个方法。")])]),a._v(" "),t("h4",{attrs:{id:"serviceloader"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#serviceloader"}},[a._v("#")]),a._v(" "),t("strong",[a._v("ServiceLoader")])]),a._v(" "),t("p",[a._v("首先先介绍一下 SPI，SPI 指的是 Service Provider Interface，主要是应用于厂商自定义组件或插件中。在 "),t("code",[a._v("java.util.ServiceLoader")]),a._v(" 的文档里有比较详细的介绍。")]),a._v(" "),t("p",[a._v("简单的说一下 Java SPI 机制的思想：系统里抽象的各个模块，往往有很多不同的实现方案，比如日志模块、XML 解析模块、JDBC 模块等。面向对象的设计里，一般推荐模块之间基于接口编程，模块之间不对实现类进行硬编码。一旦代码里涉及具体的实现类，就违反了可拔插的原则，如果需要替换一种实现，就需要修改代码。为了实现在模块装配的时候能不在程序里动态指明，这就需要一种服务发现机制。"),t("strong",[a._v("Java SPI 就是提供了这样的一种机制：为某个接口寻找服务实现的机制。")])]),a._v(" "),t("p",[a._v("SPI 规定：当服务的提供者提供了服务接口的一种实现之后，在 jar 包的 "),t("code",[a._v("META-INF/services/")]),a._v(" 目录里同时创建一个以服务接口命名的文件。这个文件里所指的就是实现该服务接口的具体实现类，当外部程序装配这个模块的时候，就能通过该 jar 包的 "),t("code",[a._v("META-INF/services/")]),a._v(" 里的配置文件找到具体的实现类名，并进行实例化以完成模块的注入。")]),a._v(" "),t("p",[a._v("在 MySQL 驱动 jar 包的 "),t("code",[a._v("META-INF/services")]),a._v(" 目录中可以看到一个名为 "),t("code",[a._v("java.sql.Driver")]),a._v(" 的文件，在其中配置了 "),t("code",[a._v("Driver")]),a._v(" 接口的实现类 "),t("code",[a._v("com.mysql.cj.jdbc.Driver")]),a._v("。")])])}),[],!1,null,null,null);s.default=n.exports}}]);