(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{740:function(e,t,a){"use strict";a.r(t);var s=a(1),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"linkedhashmap-的特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linkedhashmap-的特点"}},[e._v("#")]),e._v(" LinkedHashMap 的特点？")]),e._v(" "),a("p",[e._v("在 "),a("code",[e._v("HashMap")]),e._v(" 的基础上，使用了双向链表保存他们的顺序。如果成员变量 "),a("code",[e._v("accessOrder")]),e._v(" 为 "),a("code",[e._v("true")]),e._v("，则表示使用最近最少使用顺序（LRU），否则是插入顺序（默认就是插入顺序）。通过继承 "),a("code",[e._v("LinkedHashMap")]),e._v("，并重写 "),a("code",[e._v("removeEldestEntry")]),e._v(" 方法可以快速的实现一个 LRU 缓存。")])])}),[],!1,null,null,null);t.default=n.exports}}]);