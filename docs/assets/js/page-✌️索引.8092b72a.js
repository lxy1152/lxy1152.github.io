(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{757:function(t,s,a){"use strict";a.r(s);var e=a(1),i=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"为什么使用数据库索引可以提高效率"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么使用数据库索引可以提高效率"}},[t._v("#")]),t._v(" 为什么使用数据库索引可以提高效率？")]),t._v(" "),a("p",[t._v("默认执行 SQL 语句时是进行全表扫描的，遇到匹配条件的就加入结果集。如果有索引，就会先去索引表中一次定位到特定值的行数，减少遍历匹配的行数。索引把无序的数据变成了相对有序的数据结构。")]),t._v(" "),a("h2",{attrs:{id:"索引的底层数据结构是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引的底层数据结构是什么"}},[t._v("#")]),t._v(" 索引的底层数据结构是什么？"),a("Badge",{attrs:{text:"重点",type:"error"}})],1),t._v(" "),a("p",[t._v("B+ 树。")]),t._v(" "),a("h2",{attrs:{id:"什么是-b-树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是-b-树"}},[t._v("#")]),t._v(" 什么是 B+ 树？"),a("Badge",{attrs:{text:"重点",type:"error"}})],1),t._v(" "),a("p",[t._v("B Tree 指的是 Balance Tree，也就是平衡树。平衡树是一颗查找树，并且所有叶子节点位于同一层。")]),t._v(" "),a("p",[t._v("B+ Tree 是基于 B Tree 和叶子节点顺序访问指针进行实现的，它具有 B Tree 的平衡性，并且可以通过顺序访问指针来提高区间查询的性能。在 B+ Tree 中，一个节点中的 "),a("code",[t._v("key")]),t._v(" 从左到右非递减排列，如果某个指针的左右相邻 "),a("code",[t._v("key")]),t._v(" 分别是 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mi",[t._v("k")]),a("mi",[t._v("e")]),a("msub",[a("mi",[t._v("y")]),a("mi",[t._v("i")])],1)],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("key_i")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.8888799999999999em","vertical-align":"-0.19444em"}}),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.03148em"}},[t._v("k")]),a("span",{staticClass:"mord mathnormal"},[t._v("e")]),a("span",{staticClass:"mord"},[a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.03588em"}},[t._v("y")]),a("span",{staticClass:"msupsub"},[a("span",{staticClass:"vlist-t vlist-t2"},[a("span",{staticClass:"vlist-r"},[a("span",{staticClass:"vlist",staticStyle:{height:"0.31166399999999994em"}},[a("span",{staticStyle:{top:"-2.5500000000000003em","margin-left":"-0.03588em","margin-right":"0.05em"}},[a("span",{staticClass:"pstrut",staticStyle:{height:"2.7em"}}),a("span",{staticClass:"sizing reset-size6 size3 mtight"},[a("span",{staticClass:"mord mathnormal mtight"},[t._v("i")])])])]),a("span",{staticClass:"vlist-s"},[t._v("​")])]),a("span",{staticClass:"vlist-r"},[a("span",{staticClass:"vlist",staticStyle:{height:"0.15em"}},[a("span")])])])])])])])]),t._v(" 和 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mi",[t._v("k")]),a("mi",[t._v("e")]),a("msub",[a("mi",[t._v("y")]),a("mrow",[a("mi",[t._v("i")]),a("mo",[t._v("+")]),a("mn",[t._v("1")])],1)],1)],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("key_{i+1}")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.902771em","vertical-align":"-0.208331em"}}),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.03148em"}},[t._v("k")]),a("span",{staticClass:"mord mathnormal"},[t._v("e")]),a("span",{staticClass:"mord"},[a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.03588em"}},[t._v("y")]),a("span",{staticClass:"msupsub"},[a("span",{staticClass:"vlist-t vlist-t2"},[a("span",{staticClass:"vlist-r"},[a("span",{staticClass:"vlist",staticStyle:{height:"0.311664em"}},[a("span",{staticStyle:{top:"-2.5500000000000003em","margin-left":"-0.03588em","margin-right":"0.05em"}},[a("span",{staticClass:"pstrut",staticStyle:{height:"2.7em"}}),a("span",{staticClass:"sizing reset-size6 size3 mtight"},[a("span",{staticClass:"mord mtight"},[a("span",{staticClass:"mord mathnormal mtight"},[t._v("i")]),a("span",{staticClass:"mbin mtight"},[t._v("+")]),a("span",{staticClass:"mord mtight"},[t._v("1")])])])])]),a("span",{staticClass:"vlist-s"},[t._v("​")])]),a("span",{staticClass:"vlist-r"},[a("span",{staticClass:"vlist",staticStyle:{height:"0.208331em"}},[a("span")])])])])])])])]),t._v("，且不为 "),a("code",[t._v("null")]),t._v("，则该指针指向节点的所有 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mi",[t._v("k")]),a("mi",[t._v("e")]),a("mi",[t._v("y")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("key")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.8888799999999999em","vertical-align":"-0.19444em"}}),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.03148em"}},[t._v("k")]),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.03588em"}},[t._v("ey")])])])]),t._v(" 大于等于 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mi",[t._v("k")]),a("mi",[t._v("e")]),a("msub",[a("mi",[t._v("y")]),a("mi",[t._v("i")])],1)],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("key_i")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.8888799999999999em","vertical-align":"-0.19444em"}}),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.03148em"}},[t._v("k")]),a("span",{staticClass:"mord mathnormal"},[t._v("e")]),a("span",{staticClass:"mord"},[a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.03588em"}},[t._v("y")]),a("span",{staticClass:"msupsub"},[a("span",{staticClass:"vlist-t vlist-t2"},[a("span",{staticClass:"vlist-r"},[a("span",{staticClass:"vlist",staticStyle:{height:"0.31166399999999994em"}},[a("span",{staticStyle:{top:"-2.5500000000000003em","margin-left":"-0.03588em","margin-right":"0.05em"}},[a("span",{staticClass:"pstrut",staticStyle:{height:"2.7em"}}),a("span",{staticClass:"sizing reset-size6 size3 mtight"},[a("span",{staticClass:"mord mathnormal mtight"},[t._v("i")])])])]),a("span",{staticClass:"vlist-s"},[t._v("​")])]),a("span",{staticClass:"vlist-r"},[a("span",{staticClass:"vlist",staticStyle:{height:"0.15em"}},[a("span")])])])])])])])]),t._v(" 且小于等于 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mi",[t._v("k")]),a("mi",[t._v("e")]),a("msub",[a("mi",[t._v("y")]),a("mrow",[a("mi",[t._v("i")]),a("mo",[t._v("+")]),a("mn",[t._v("1")])],1)],1)],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("key_{i+1}")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.902771em","vertical-align":"-0.208331em"}}),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.03148em"}},[t._v("k")]),a("span",{staticClass:"mord mathnormal"},[t._v("e")]),a("span",{staticClass:"mord"},[a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.03588em"}},[t._v("y")]),a("span",{staticClass:"msupsub"},[a("span",{staticClass:"vlist-t vlist-t2"},[a("span",{staticClass:"vlist-r"},[a("span",{staticClass:"vlist",staticStyle:{height:"0.311664em"}},[a("span",{staticStyle:{top:"-2.5500000000000003em","margin-left":"-0.03588em","margin-right":"0.05em"}},[a("span",{staticClass:"pstrut",staticStyle:{height:"2.7em"}}),a("span",{staticClass:"sizing reset-size6 size3 mtight"},[a("span",{staticClass:"mord mtight"},[a("span",{staticClass:"mord mathnormal mtight"},[t._v("i")]),a("span",{staticClass:"mbin mtight"},[t._v("+")]),a("span",{staticClass:"mord mtight"},[t._v("1")])])])])]),a("span",{staticClass:"vlist-s"},[t._v("​")])]),a("span",{staticClass:"vlist-r"},[a("span",{staticClass:"vlist",staticStyle:{height:"0.208331em"}},[a("span")])])])])])])])]),t._v("。")]),t._v(" "),a("div",{staticClass:"custom-block center"},[a("p",[a("img",{attrs:{src:"https://i.loli.net/2021/07/30/xu6AGHYJw5NvXC9.png",alt:"B+_树.jpg"}})])]),t._v(" "),a("h2",{attrs:{id:"为什么采用-b-树而不是-b-树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么采用-b-树而不是-b-树"}},[t._v("#")]),t._v(" 为什么采用 B+ 树而不是 B 树？"),a("Badge",{attrs:{text:"重点",type:"error"}})],1),t._v(" "),a("p",[t._v("B+ 树和 B 树的区别：")]),t._v(" "),a("ul",[a("li",[t._v("B+ 树非叶子节点只存储关键字和指向子节点的指针，而 B 树还存储了数据，在同样大小的情况下，B+ 树可以存储更多的关键字")]),t._v(" "),a("li",[t._v("B+ 树叶子节点存储了所有关键字和数据，并且多个节点用链表连接，可以快速进行范围查找")]),t._v(" "),a("li",[t._v("B+ 树非叶子节点不存储数据，所以查询时间复杂度固定为 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mi",[t._v("O")]),a("mo",{attrs:{stretchy:"false"}},[t._v("(")]),a("mi",[t._v("log")]),a("mo",[t._v("⁡")]),a("mi",[t._v("N")]),a("mo",{attrs:{stretchy:"false"}},[t._v(")")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("O(\\log N)")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.02778em"}},[t._v("O")]),a("span",{staticClass:"mopen"},[t._v("(")]),a("span",{staticClass:"mop"},[t._v("lo"),a("span",{staticStyle:{"margin-right":"0.01389em"}},[t._v("g")])]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.10903em"}},[t._v("N")]),a("span",{staticClass:"mclose"},[t._v(")")])])])]),t._v("，B 树查询时间复杂度不固定，最好是 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mi",[t._v("O")]),a("mo",{attrs:{stretchy:"false"}},[t._v("(")]),a("mn",[t._v("1")]),a("mo",{attrs:{stretchy:"false"}},[t._v(")")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("O(1)")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.02778em"}},[t._v("O")]),a("span",{staticClass:"mopen"},[t._v("(")]),a("span",{staticClass:"mord"},[t._v("1")]),a("span",{staticClass:"mclose"},[t._v(")")])])])])])]),t._v(" "),a("h2",{attrs:{id:"为什么采用-b-树而不是红黑树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么采用-b-树而不是红黑树"}},[t._v("#")]),t._v(" 为什么采用 B+ 树而不是红黑树？"),a("Badge",{attrs:{text:"重点",type:"error"}})],1),t._v(" "),a("p",[t._v("红黑树等平衡树也可以用来实现索引，但是文件系统及数据库系统普遍采用 B+ 树作为索引结构，这是因为使用 B+ 树访问磁盘数据有更高的性能。")]),t._v(" "),a("h3",{attrs:{id:"b-树有更低的树高"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#b-树有更低的树高"}},[t._v("#")]),t._v(" B+ 树有更低的树高")]),t._v(" "),a("p",[t._v("平衡树的树高 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mi",[t._v("O")]),a("mo",{attrs:{stretchy:"false"}},[t._v("(")]),a("mi",[t._v("h")]),a("mo",{attrs:{stretchy:"false"}},[t._v(")")]),a("mtext"),a("mo",[t._v("=")]),a("mtext"),a("mi",[t._v("O")]),a("mo",{attrs:{stretchy:"false"}},[t._v("(")]),a("msub",[a("mrow",[a("mi",[t._v("log")]),a("mo",[t._v("⁡")])],1),a("mi",[t._v("d")])],1),a("mi",[t._v("N")]),a("mo",{attrs:{stretchy:"false"}},[t._v(")")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("O(h)\\ =\\ O(\\log_dN)")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.02778em"}},[t._v("O")]),a("span",{staticClass:"mopen"},[t._v("(")]),a("span",{staticClass:"mord mathnormal"},[t._v("h")]),a("span",{staticClass:"mclose"},[t._v(")")]),a("span",{staticClass:"mspace"}),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}}),a("span",{staticClass:"mrel"},[t._v("=")]),a("span",{staticClass:"mspace"}),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}})]),a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.02778em"}},[t._v("O")]),a("span",{staticClass:"mopen"},[t._v("(")]),a("span",{staticClass:"mop"},[a("span",{staticClass:"mop"},[t._v("lo"),a("span",{staticStyle:{"margin-right":"0.01389em"}},[t._v("g")])]),a("span",{staticClass:"msupsub"},[a("span",{staticClass:"vlist-t vlist-t2"},[a("span",{staticClass:"vlist-r"},[a("span",{staticClass:"vlist",staticStyle:{height:"0.24196799999999993em"}},[a("span",{staticStyle:{top:"-2.4558600000000004em","margin-right":"0.05em"}},[a("span",{staticClass:"pstrut",staticStyle:{height:"2.7em"}}),a("span",{staticClass:"sizing reset-size6 size3 mtight"},[a("span",{staticClass:"mord mathnormal mtight"},[t._v("d")])])])]),a("span",{staticClass:"vlist-s"},[t._v("​")])]),a("span",{staticClass:"vlist-r"},[a("span",{staticClass:"vlist",staticStyle:{height:"0.24414em"}},[a("span")])])])])]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.10903em"}},[t._v("N")]),a("span",{staticClass:"mclose"},[t._v(")")])])])]),t._v("，其中 "),a("code",[t._v("d")]),t._v(" 为每个节点的出度。红黑树的出度为 "),a("code",[t._v("2")]),t._v("，而 B+ 树的出度一般都非常大，所以红黑树的树高 "),a("code",[t._v("h")]),t._v(" 很明显比 B+ 树大非常多。")]),t._v(" "),a("h3",{attrs:{id:"磁盘访问原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#磁盘访问原理"}},[t._v("#")]),t._v(" 磁盘访问原理")]),t._v(" "),a("p",[t._v("操作系统一般将内存和磁盘分割成固定大小的块，每一块称为一页，内存与磁盘以页为单位交换数据。数据库系统将索引的一个节点的大小设置为页的大小，使得一次 I/O 就能完全载入一个节点。")]),t._v(" "),a("p",[t._v("如果数据不在同一个磁盘块上，那么通常需要移动制动手臂进行寻道，而制动手臂因为其物理结构导致了移动效率低下，从而增加磁盘数据读取时间。B+ 树相对于红黑树有更低的树高，进行寻道的次数与树高成正比，在同一个磁盘块上进行访问只需要很短的磁盘旋转时间，所以 B+ 树更适合磁盘数据的读取。")]),t._v(" "),a("h3",{attrs:{id:"磁盘预读特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#磁盘预读特性"}},[t._v("#")]),t._v(" 磁盘预读特性")]),t._v(" "),a("p",[t._v("为了减少磁盘 I/O 操作，磁盘往往不是严格按需读取，而是每次都会预读。预读过程中，磁盘进行顺序读取，顺序读取不需要进行磁盘寻道，并且只需要很短的磁盘旋转时间，速度会非常快。并且可以利用预读特性，相邻的节点也能够被预先载入。")]),t._v(" "),a("h2",{attrs:{id:"什么是聚簇和非聚簇索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是聚簇和非聚簇索引"}},[t._v("#")]),t._v(" 什么是聚簇和非聚簇索引？"),a("Badge",{attrs:{text:"重点",type:"error"}})],1),t._v(" "),a("ul",[a("li",[t._v("聚簇索引，又叫主键索引，每个表只有一个主键索引，即每张表按照主键构造一颗 B+ 树，叶子节点中存放的就是整张表的记录数据")]),t._v(" "),a("li",[t._v("非聚簇索引，又叫辅助索引，叶子节点保存相应行数据的主键索引值")])]),t._v(" "),a("h2",{attrs:{id:"什么是前缀索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是前缀索引"}},[t._v("#")]),t._v(" 什么是前缀索引？")]),t._v(" "),a("p",[t._v("如果列的值较长，比如 "),a("code",[t._v("blob")]),t._v("、"),a("code",[t._v("text")]),t._v("、"),a("code",[t._v("varchar")]),t._v(" 就必须建立前缀索引，即将值的前一部分（或后一部分）作为索引。这样既可以节约空间，又可以提高查询效率。但无法使用前缀索引做 "),a("code",[t._v("order by")]),t._v(" 和 "),a("code",[t._v("group by")]),t._v("，也无法使用前缀索引做覆盖扫描。")]),t._v(" "),a("h2",{attrs:{id:"什么是覆盖索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是覆盖索引"}},[t._v("#")]),t._v(" 什么是覆盖索引？"),a("Badge",{attrs:{text:"重点",type:"error"}})],1),t._v(" "),a("p",[t._v("覆盖索引是指 "),a("code",[t._v("select")]),t._v(" 语句所查找的数据列从索引中就能获得，不必再从数据表中读取。如果一个索引包含了（或覆盖了）满足查询语句中字段与条件的数据就叫做覆盖索引。当发起一个被索引覆盖的查询（也叫作索引覆盖查询）时，在解释方案的 Extra 列会提示 Using index。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("回表查询")]),t._v(" "),a("p",[t._v("如果通过一个索引树不能拿到所有的数据，那么就会根据辅助索引中叶子节点所对应的主键去主键索引树种查询需要的信息，这种方式叫做回表查询。由于需要查多棵树，所以效率肯定会降低。举个例子：")]),t._v(" "),a("p",[t._v("假设用户表（user）需要保存用户 id，用户姓名（name），用户性别（sex）。主键是 id，在 name 列上建了一个索引。如果使用下面的 sql 进行查询就使用到了覆盖索引，因为通过 name 索引树可以获得 name 和对应的 id（name 索引树的叶子节点保存会保存主键）：")]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("user")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ?"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("相反如果使用下面的 sql 进行查询，将导致回表查询，因为 name 索引树种不包含 sex 的信息，这个信息必须通过主键索引树进行获取：")]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sex "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("user")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ?"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])])]),t._v(" "),a("h2",{attrs:{id:"什么情况会导致索引失效"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么情况会导致索引失效"}},[t._v("#")]),t._v(" 什么情况会导致索引失效？"),a("Badge",{attrs:{text:"重点",type:"error"}})],1),t._v(" "),a("p",[t._v("对于以下情况，索引会失效：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("like")]),t._v(" 以 % 开头")]),t._v(" "),a("li",[a("code",[t._v("or")]),t._v(" 查询，必须左右字段都是索引，否则索引失效")]),t._v(" "),a("li",[t._v("联合索引，遵从最左匹配原则，如果不是使用第一列索引，索引失效")]),t._v(" "),a("li",[t._v("数据出现隐形转换，如 "),a("code",[t._v("varchar")]),t._v(" 字段没加单引号，自动转为 "),a("code",[t._v("int")]),t._v(" 类型，会使索引失效")]),t._v(" "),a("li",[t._v("索引字段使用 "),a("code",[t._v("not")]),t._v("、"),a("code",[t._v("<>")]),t._v("、"),a("code",[t._v("!=")]),t._v(" 会使索引失效")]),t._v(" "),a("li",[t._v("索引字段使用函数，索引无效")])]),t._v(" "),a("h2",{attrs:{id:"什么是最左匹配原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是最左匹配原则"}},[t._v("#")]),t._v(" 什么是最左匹配原则？"),a("Badge",{attrs:{text:"重点",type:"error"}})],1),t._v(" "),a("p",[t._v("对于联合索引，这些值在 B+ 树中存储时，是按照第一个值升序、第二个值升序...第 n 个值升序的方式来排列的（如果某个值相同，那么会比较下一个值）。举个例子：假设索引列是 a、b、c，那么索引中保存的结构可能是：")]),t._v(" "),a("p",[t._v("（1，1，1），（1，1，2），（1，2，1），（1，2，2），（2，1，1）......")]),t._v(" "),a("p",[t._v("因此，如果查询时未指定最左侧的列，那么将不能快速定位数据的范围，导致 MySQL 需要进行全表（或范围）扫描。 还是以上面的内容举例，比如我用使用这个语句来搜索：")]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" tableName "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("由于没有指定 a 的值，那么只能挨个访问记录，看一下 b 是不是等于 2。相反，如果我用这个语句来搜索：")]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" tableName "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("由于指定了 a = 1，那么只需要在有限的集合中进行查找就可以了。通过 "),a("code",[t._v("explain")]),t._v(" 也可以看到上述两条语句的区别。")]),t._v(" "),a("h2",{attrs:{id:"什么是-mysql-索引重建-为什么需要索引重建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是-mysql-索引重建-为什么需要索引重建"}},[t._v("#")]),t._v(" 什么是 Mysql 索引重建，为什么需要索引重建？")]),t._v(" "),a("p",[t._v("数据库在删除数据时只是将原始数据标记为已删除，实际上并没有释放空间，这会造成页面中有很多空洞，所以需要重建索引提高页面页面利用率。索引重建的过程会创建一个新的索引，把数据按顺序插入，使索引更紧凑、更省空间。重建索引的方式包括：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("mysqldump")]),t._v(" 导出然后重新导入")]),t._v(" "),a("li",[a("code",[t._v("alter table tableName ENGINE = InnoDB")])]),t._v(" "),a("li",[a("code",[t._v("alter table tableName drop/add index k")])]),t._v(" "),a("li",[a("code",[t._v("alter table tableName drop/add primary key")])])]),t._v(" "),a("h2",{attrs:{id:"解释方案中关键的字段有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解释方案中关键的字段有哪些"}},[t._v("#")]),t._v(" 解释方案中关键的字段有哪些？"),a("Badge",{attrs:{text:"重点",type:"error"}})],1),t._v(" "),a("p",[t._v("在一个语句的前面添加 "),a("code",[t._v("explain")]),t._v(" 就可以获得这个语句的执行方案。在执行方案中有几个比较关键的字段（以下内容只列举了一部分，实际上内容很多）：")]),t._v(" "),a("table",[a("tr",[a("th",[t._v("字段")]),t._v(" "),a("th",[t._v("字段含义")]),t._v(" "),a("th",[t._v("可能的取值")]),t._v(" "),a("th",[t._v("这个取值的含义")])]),t._v(" "),a("tr",[a("th",{attrs:{rowspan:"3"}},[t._v("type")]),t._v(" "),a("td",{attrs:{rowspan:"3"}},[t._v("查找类型")]),t._v(" "),a("td",[t._v("all")]),t._v(" "),a("td",[t._v("表示此次查询进行了全表扫描")])]),t._v(" "),a("tr",[a("td",[t._v("const")]),t._v(" "),a("td",[t._v("表示表中有多条记录，但只从表中查询一条记录")])]),t._v(" "),a("tr",[a("td",[t._v("index")]),t._v(" "),a("td",[t._v("表示对表中的索引进行了完整的扫描")])]),t._v(" "),a("tr",[a("th",[t._v("possible_keys")]),t._v(" "),a("td",[t._v("查询可能使用到的索引都会在这里列出来，如果为空说明没有可用的索引")]),t._v(" "),a("td"),t._v(" "),a("td")]),t._v(" "),a("tr",[a("th",[t._v("key")]),t._v(" "),a("td",[t._v("实际使用的索引")]),t._v(" "),a("td"),t._v(" "),a("td")]),t._v(" "),a("tr",[a("th",[t._v("rows")]),t._v(" "),a("td",[t._v("表示查询的行数，这个值是一个估计值")]),t._v(" "),a("td"),t._v(" "),a("td")]),t._v(" "),a("tr",[a("th",[t._v("extra")]),t._v(" "),a("td",[t._v("额外的信息说明")]),t._v(" "),a("td",[t._v("using_index")]),t._v(" "),a("td",[t._v("表示此次查询利用了覆盖索引")])])])])}),[],!1,null,null,null);s.default=i.exports}}]);