(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{789:function(t,s,a){"use strict";a.r(s);var e=a(1),i=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"redis-是如何实现字符串的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis-是如何实现字符串的"}},[t._v("#")]),t._v(" Redis 是如何实现字符串的？"),a("Badge",{attrs:{text:"重点",type:"error"}})],1),t._v(" "),a("p",[t._v("SDS（Simple Dynamic String）简单动态字符串是 Redis 底层实现的一种可修改字符串。类似于 Java 中的 "),a("code",[t._v("ArrayList")]),t._v("，它采用预分配冗余空间的方式来减少内存的频繁分配。SDS 比 C 语言的字符串多了一个 "),a("code",[t._v("SDSHDR")]),t._v(" 表头，里面存放 "),a("code",[t._v("free")]),t._v("（空闲长度）、"),a("code",[t._v("len")]),t._v("（已使用长度）、"),a("code",[t._v("buf")]),t._v("（真正保存的那个字符串）。源码中提供的 "),a("code",[t._v("sds")]),t._v(" 类型实际上是 "),a("code",[t._v("char *")]),t._v(" 的别名，它真正指向的是 buf 数组。")]),t._v(" "),a("p",[t._v("优点：")]),t._v(" "),a("ul",[a("li",[t._v("获取字符串长度更快：C 语言获取字符串长度需要遍历整个字符串，时间复杂度为 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mi",[t._v("O")]),a("mo",{attrs:{stretchy:"false"}},[t._v("(")]),a("mi",[t._v("N")]),a("mo",{attrs:{stretchy:"false"}},[t._v(")")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("O(N)")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.02778em"}},[t._v("O")]),a("span",{staticClass:"mopen"},[t._v("(")]),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.10903em"}},[t._v("N")]),a("span",{staticClass:"mclose"},[t._v(")")])])])]),t._v("，SDS 的表头 "),a("code",[t._v("len")]),t._v(" 成员存放了当前已使用长度，获取字符串长度复杂度为 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mi",[t._v("O")]),a("mo",{attrs:{stretchy:"false"}},[t._v("(")]),a("mn",[t._v("1")]),a("mo",{attrs:{stretchy:"false"}},[t._v(")")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("O(1)")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.02778em"}},[t._v("O")]),a("span",{staticClass:"mopen"},[t._v("(")]),a("span",{staticClass:"mord"},[t._v("1")]),a("span",{staticClass:"mclose"},[t._v(")")])])])])]),t._v(" "),a("li",[t._v("杜绝缓冲区溢出：C 语言字符串本身不记录自身长度和空闲空间，容易造成缓冲区溢出，SDS 表头的 "),a("code",[t._v("free")]),t._v(" 成员存放了空闲空间，拼接字符串前会先通过 "),a("code",[t._v("free")]),t._v(" 字段检测剩余空间是否能满足，如果空间不够就会扩容")]),t._v(" "),a("li",[t._v("减少内存分配次数：C 语言对字符串进行增长或缩短操作，都需要重新分配内存，SDS 使用了空间预分配和惰性空间释放策略，减少了内存分配次数")]),t._v(" "),a("li",[t._v("二进制安全：C 语言字符串遇 "),a("code",[t._v("\\0")]),t._v(" 则止，会对字符串进行截断，而 SDS 判断字符串是否结尾的依据是头信息中的 "),a("code",[t._v("len")]),t._v(" 属性，即使 SDS 中间保存了 "),a("code",[t._v("\\0")]),t._v(" 也不影响")])]),t._v(" "),a("h2",{attrs:{id:"sds-的扩容机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sds-的扩容机制"}},[t._v("#")]),t._v(" SDS 的扩容机制？"),a("Badge",{attrs:{text:"重点",type:"error"}})],1),t._v(" "),a("p",[t._v("SDS 源码提供了 "),a("code",[t._v("sdsMakeRoomFor()")]),t._v(" 函数来进行扩容，它的参数有两个，一个 "),a("code",[t._v("sds")]),t._v(" 类型的字符串数组，另一个是一个数字 "),a("code",[t._v("addlen")]),t._v("。具体的流程如下：")]),t._v(" "),a("div",{staticClass:"custom-block center"},[a("p",[a("img",{attrs:{src:"https://i.loli.net/2021/07/31/zYeV1apdblOAScB.png",alt:"sds扩容流程图.jpg"}})])]),t._v(" "),a("h2",{attrs:{id:"redis-的字典是如何实现的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis-的字典是如何实现的"}},[t._v("#")]),t._v(" Redis 的字典是如何实现的？")]),t._v(" "),a("p",[t._v("C 语言没有提供字典，Redis 提供了一种实现。"),a("code",[t._v("Hash")]),t._v(" 类型的底层实现是字典。它根据键值对中的键计算哈希值和索引值，然后根据索引值，将包含键值对的哈希节点放到哈希数组的指定索引上。")]),t._v(" "),a("h3",{attrs:{id:"解决哈希冲突"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决哈希冲突"}},[t._v("#")]),t._v(" 解决哈希冲突")]),t._v(" "),a("p",[t._v("Redis 采用链地址法解决键冲突，每个哈希节点有一个 "),a("code",[t._v("next")]),t._v(" 指针，多个哈希节点通过 "),a("code",[t._v("next")]),t._v(" 指针构成一个单向链表，最新的节点总是添加到表头。")]),t._v(" "),a("h3",{attrs:{id:"rehash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rehash"}},[t._v("#")]),t._v(" rehash")]),t._v(" "),a("p",[t._v("字典中保存两个哈希表："),a("code",[t._v("ht[0]")]),t._v(" 和 "),a("code",[t._v("ht[1]")]),t._v("，"),a("code",[t._v("ht[1]")]),t._v(" 只在 "),a("code",[t._v("rehash")]),t._v(" 时使用。Redis 对字典的哈希表执行 "),a("code",[t._v("rehash")]),t._v(" 的步骤如下：")]),t._v(" "),a("ul",[a("li",[t._v("为 "),a("code",[t._v("ht[1]")]),t._v(" 哈希表分配空间，"),a("code",[t._v("ht[1]")]),t._v(" 的大小为第一个大于等于 "),a("code",[t._v("ht[0].used * 2")]),t._v(" 的 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("msup",[a("mn",[t._v("2")]),a("mi",[t._v("n")])],1)],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("2^n")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.664392em","vertical-align":"0em"}}),a("span",{staticClass:"mord"},[a("span",{staticClass:"mord"},[t._v("2")]),a("span",{staticClass:"msupsub"},[a("span",{staticClass:"vlist-t"},[a("span",{staticClass:"vlist-r"},[a("span",{staticClass:"vlist",staticStyle:{height:"0.664392em"}},[a("span",{staticStyle:{top:"-3.063em","margin-right":"0.05em"}},[a("span",{staticClass:"pstrut",staticStyle:{height:"2.7em"}}),a("span",{staticClass:"sizing reset-size6 size3 mtight"},[a("span",{staticClass:"mord mathnormal mtight"},[t._v("n")])])])])])])])])])])])]),t._v(" "),a("li",[t._v("将保存在 "),a("code",[t._v("ht[0]")]),t._v(" 中的所有键值对 "),a("code",[t._v("rehash")]),t._v(" 到 "),a("code",[t._v("ht[1]")]),t._v(" 上面")]),t._v(" "),a("li",[t._v("当 "),a("code",[t._v("ht[0]")]),t._v(" 包含的所有键值对都迁移到 "),a("code",[t._v("ht[1]")]),t._v(" 之后，释放 "),a("code",[t._v("ht[0]")]),t._v("，将 "),a("code",[t._v("ht[1]")]),t._v(" 设置为 "),a("code",[t._v("ht[0]")]),t._v("，并为 "),a("code",[t._v("ht[1]")]),t._v(" 新创建一个空白哈希表，为下一次 "),a("code",[t._v("rehash")]),t._v(" 做准备")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("渐进式 rehash")]),t._v(" "),a("p",[a("code",[t._v("rehash")]),t._v(" 动作并不是一次性、集中式完成的，而是分多次、渐进式的完成的。如果服务器中包含很多键值对，要一次性的将这些键值对全部 "),a("code",[t._v("rehash")]),t._v(" 到 "),a("code",[t._v("ht[1]")]),t._v(" 的话，庞大的计算量可能导致服务器在一段时间内停止服务。")])]),t._v(" "),a("h2",{attrs:{id:"redis-的跳跃表是如何实现的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis-的跳跃表是如何实现的"}},[t._v("#")]),t._v(" Redis 的跳跃表是如何实现的？"),a("Badge",{attrs:{text:"重点",type:"error"}})],1),t._v(" "),a("p",[t._v("跳跃表是有序集合（"),a("code",[t._v("zset")]),t._v("）的底层实现之一，它是基于多指针有序链表实现的，可以看成多个有序链表。")]),t._v(" "),a("div",{staticClass:"custom-block center"},[a("p",[a("img",{attrs:{src:"https://i.loli.net/2021/07/31/sWy4M7OYBSGvm8h.png",alt:"跳跃表.png"}})])]),t._v(" "),a("p",[t._v("在查找时，从上层指针开始查找，找到对应的区间之后再到下一层去查找。下图演示了查找 22 的过程：")]),t._v(" "),a("div",{staticClass:"custom-block center"},[a("p",[a("img",{attrs:{src:"https://i.loli.net/2021/07/31/L3tyY2nzQTOZx6e.png",alt:"跳跃表查找.png"}})])]),t._v(" "),a("p",[t._v("与红黑树等平衡树相比，跳跃表具有以下优点：")]),t._v(" "),a("ul",[a("li",[t._v("插入速度非常快速，因为不需要进行旋转等操作来维护平衡性")]),t._v(" "),a("li",[t._v("更容易实现")]),t._v(" "),a("li",[t._v("支持无锁操作")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("ziplist 和 skiplist")]),t._v(" "),a("p",[t._v("默认情况下，当 "),a("code",[t._v("zset")]),t._v(" 中集合的元素个数少于 128 个（对应配置项 "),a("code",[t._v("zset-max-ziplist-value")]),t._v("）并且 "),a("code",[t._v("zadd")]),t._v(" 操作的 "),a("code",[t._v("member")]),t._v(" 的长度小于 64 字节（对应配置项 "),a("code",[t._v("zset-max-ziplist-entries")]),t._v("），Redis 会使用 "),a("code",[t._v("ziplist")]),t._v(" 来存储元素，否则使用 "),a("code",[t._v("skiplist")]),t._v(" 来存储元素。")]),t._v(" "),a("p",[t._v("修改 "),a("code",[t._v("zset-max-ziplist-value")]),t._v(" 为 3，并执行以下操作查看 Redis 所使用的数据结构：")]),t._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('127.0.0.1:6379> zadd myset 10 "A"\n(integer) 1\n127.0.0.1:6379> object encoding myset\n"ziplist"\n\n// 此处省略插入数据 BB 和 CCC 的过程，它们的结果也是 ziplist\n\n127.0.0.1:6379> zadd myset 10 "DDDD"\n127.0.0.1:6379> object encoding myset\n"skiplist"\n')])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])])]),t._v(" "),a("h2",{attrs:{id:"介绍一下-redis-的线程模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#介绍一下-redis-的线程模型"}},[t._v("#")]),t._v(" 介绍一下 Redis 的线程模型？")]),t._v(" "),a("div",{staticClass:"custom-block center"},[a("p",[a("img",{attrs:{src:"https://i.loli.net/2021/07/31/PK4j3RF1mJsIqbe.png",alt:"Redis线程模型.png"}})])])])}),[],!1,null,null,null);s.default=i.exports}}]);