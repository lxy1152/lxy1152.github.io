(window.webpackJsonp=window.webpackJsonp||[]).push([[122],{784:function(t,a,s){"use strict";s.r(a);var _=s(1),r=Object(_.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"介绍一下-tcp-的三次握手"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#介绍一下-tcp-的三次握手"}},[t._v("#")]),t._v(" 介绍一下 TCP 的三次握手？"),s("Badge",{attrs:{text:"重点",type:"error"}})],1),t._v(" "),s("div",{staticClass:"custom-block center"},[s("p",[s("img",{attrs:{src:"https://i.loli.net/2021/08/01/MoAdhFvkaTfROXC.png",alt:"tcp三次握手.jpg"}})])]),t._v(" "),s("h3",{attrs:{id:"第一次握手"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第一次握手"}},[t._v("#")]),t._v(" 第一次握手")]),t._v(" "),s("p",[t._v("客户端发送带有 SYN 标志的数据包，假设 SYN 的序列号为 J。")]),t._v(" "),s("h3",{attrs:{id:"第二次握手"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第二次握手"}},[t._v("#")]),t._v(" 第二次握手")]),t._v(" "),s("p",[t._v("服务端接收到 SYN J 的请求后，向客户端返回带有 SYN/ACK 标志的数据包，ACK 的序列号为 J + 1，表示是 SYN J 的应答，新发送的 SYN 的序列号为 K。")]),t._v(" "),s("h3",{attrs:{id:"第三次握手"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第三次握手"}},[t._v("#")]),t._v(" 第三次握手")]),t._v(" "),s("p",[t._v("客户端在接收到服务端的应答后，向服务端返回带有 ACK 标志的数据包，ACK 的序列号为 K + 1，表示是 SYN K 的应答。")]),t._v(" "),s("h2",{attrs:{id:"为什么是三次握手而不是两次或者四次握手"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么是三次握手而不是两次或者四次握手"}},[t._v("#")]),t._v(" 为什么是三次握手而不是两次或者四次握手？"),s("Badge",{attrs:{text:"重点",type:"error"}})],1),t._v(" "),s("h3",{attrs:{id:"三次握手才可以阻止重复历史连接的初始化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三次握手才可以阻止重复历史连接的初始化"}},[t._v("#")]),t._v(" 三次握手才可以阻止重复历史连接的初始化")]),t._v(" "),s("p",[t._v("客户端连续发送多次 SYN 建立连接的报文，在网络拥堵情况下：")]),t._v(" "),s("ul",[s("li",[t._v("一个旧 SYN 报文比最新的 SYN 报文早到达了服务端")]),t._v(" "),s("li",[t._v("那么此时服务端就会回一个 SYN + ACK 报文给客户端")]),t._v(" "),s("li",[t._v("客户端收到后可以根据自身的上下文，判断这是一个历史连接（序列号过期或超时），那么客户端就会发送 RST（Reset the connection，用于复位因某种原因引起出现的错误连接，也用来拒绝非法数据和请求）报文给服务端，表示中止这一次连接")])]),t._v(" "),s("p",[t._v("如果是两次握手连接，就不能判断当前连接是否是历史连接，三次握手则可以在客户端（发送方）准备发送第三次报文时：")]),t._v(" "),s("ul",[s("li",[t._v("如果是历史连接（序列号过期或超时），则第三次握手发送的报文是 RST 报文，以此终止历史连接")]),t._v(" "),s("li",[t._v("如果不是历史连接，则第三次发送的报文是 ACK 报文，通信双方就会成功建立连接")])]),t._v(" "),s("h3",{attrs:{id:"同步双方初始序列号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#同步双方初始序列号"}},[t._v("#")]),t._v(" 同步双方初始序列号")]),t._v(" "),s("p",[t._v("TCP 协议的通信双方， 都必须维护一个序列号， 序列号是可靠传输的一个关键因素，它的作用包括：")]),t._v(" "),s("ul",[s("li",[t._v("接收方可以去除重复的数据")]),t._v(" "),s("li",[t._v("接收方可以根据数据包的序列号按序接收")]),t._v(" "),s("li",[t._v("可以标识发送出去的数据包中， 哪些是已经被对方收到的")])]),t._v(" "),s("p",[t._v("可见，序列号在 TCP 连接中占据着非常重要的作用，所以当客户端发送携带「初始序列号」的 SYN 报文的时候，需要服务端回一个 ACK 应答报文，表示客户端的 SYN 报文已被服务端成功接收，那当服务端发送「初始序列号」给客户端的时候，依然也要得到客户端的应答回应，这样一来一回，才能确保双方的初始序列号能被可靠的同步。")]),t._v(" "),s("h3",{attrs:{id:"避免资源浪费"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#避免资源浪费"}},[t._v("#")]),t._v(" 避免资源浪费")]),t._v(" "),s("p",[t._v("如果只有两次握手，当客户端的 SYN 请求连接在网络中阻塞，客户端没有接收到 ACK 报文，就会重新发送 SYN 。由于没有第三次握手，服务器不清楚客户端是否收到了自己发送的建立连接的 ACK 确认信号，所以每收到一个 SYN 就只能先主动建立一个连接，这会造成什么情况呢？")]),t._v(" "),s("p",[t._v("如果客户端的 SYN 阻塞了，重复发送多次 SYN 报文，那么服务器在收到请求后就会建立多个冗余的无效链接，造成不必要的资源浪费。")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("四次握手")]),t._v(" "),s("p",[t._v("四次握手是将服务器返回的 ACK + SYN 拆成两次进行返回的，但实际上这两步可以放在一起处理，因此最终简化成了三次握手。")])]),t._v(" "),s("h2",{attrs:{id:"可以把其他数据和第三次握手的-ack-一起发给服务端吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可以把其他数据和第三次握手的-ack-一起发给服务端吗"}},[t._v("#")]),t._v(" 可以把其他数据和第三次握手的 ACK 一起发给服务端吗？")]),t._v(" "),s("p",[t._v("客户端在收到服务端的第二次握手信息时就已经可以知道通信连接是正常的，状态会变更为 ESTABLISHED，所以在第三次握手时可以传输数据。")]),t._v(" "),s("h2",{attrs:{id:"介绍一下-tcp-的四次挥手"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#介绍一下-tcp-的四次挥手"}},[t._v("#")]),t._v(" 介绍一下 TCP 的四次挥手？"),s("Badge",{attrs:{text:"重点",type:"error"}})],1),t._v(" "),s("div",{staticClass:"custom-block center"},[s("p",[s("img",{attrs:{src:"https://i.loli.net/2021/08/01/SqEDgmkBano9NQb.png",alt:"tcp四次挥手.jpg"}})])]),t._v(" "),s("h3",{attrs:{id:"第一次挥手"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第一次挥手"}},[t._v("#")]),t._v(" 第一次挥手")]),t._v(" "),s("p",[t._v("客户端打算关闭连接，此时会发送一个 TCP 首部 FIN 标志位被置为 1 的报文，即 FIN 报文，之后客户端进入 FIN_WAIT_1 状态。")]),t._v(" "),s("h3",{attrs:{id:"第二次挥手"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第二次挥手"}},[t._v("#")]),t._v(" 第二次挥手")]),t._v(" "),s("p",[t._v("服务端收到该报文后，就向客户端发送 ACK 应答报文，接着服务端进入 CLOSED_WAIT 状态。客户端收到服务端的 ACK 应答报文后，进入 FIN_WAIT_2 状态。")]),t._v(" "),s("h3",{attrs:{id:"第三次挥手"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第三次挥手"}},[t._v("#")]),t._v(" 第三次挥手")]),t._v(" "),s("p",[t._v("等待服务端处理完数据后，也向客户端发送 FIN 报文，之后服务端进入 LAST_ACK 状态。")]),t._v(" "),s("h3",{attrs:{id:"第四次挥手"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第四次挥手"}},[t._v("#")]),t._v(" 第四次挥手")]),t._v(" "),s("p",[t._v("客户端收到服务端的 FIN 报文后，回一个 ACK 应答报文，之后进入 TIME_WAIT 状态。服务器收到了 ACK 应答报文后，就进入了 CLOSED 状态，至此服务端已经完成连接的关闭。"),s("strong",[t._v("客户端在经过 2MSL 个时间后，自动进入 CLOSED 状态")]),t._v("，至此客户端也完成连接的关闭。")]),t._v(" "),s("h2",{attrs:{id:"为什么需要四次挥手"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要四次挥手"}},[t._v("#")]),t._v(" 为什么需要四次挥手？"),s("Badge",{attrs:{text:"重点",type:"error"}})],1),t._v(" "),s("ul",[s("li",[t._v("关闭连接时，客户端向服务端发送 FIN 时，仅仅表示客户端不再发送数据了但是还能接收数据")]),t._v(" "),s("li",[t._v("服务器收到客户端的 FIN 报文时，先回一个 ACK 应答报文，而服务端可能还有数据需要处理和发送，等服务端不再发送数据时，才发送 FIN 报文给客户端来表示同意现在关闭连接")])]),t._v(" "),s("p",[t._v("由于服务端通常需要等待完成数据的发送和处理，所以服务端的 ACK 和 FIN 一般都会分开发送，从而比三次握手多了一次。")])])}),[],!1,null,null,null);a.default=r.exports}}]);