(window.webpackJsonp=window.webpackJsonp||[]).push([[86],{730:function(a,t,s){"use strict";s.r(t);var r=s(1),v=Object(r.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"什么是反射"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是反射"}},[a._v("#")]),a._v(" 什么是反射？")]),a._v(" "),s("p",[a._v("反射是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性。这种动态获取的信息以及动态调用对象的方法的功能称为 Java 语言的反射机制。")]),a._v(" "),s("h2",{attrs:{id:"反射机制的优缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#反射机制的优缺点"}},[a._v("#")]),a._v(" 反射机制的优缺点？")]),a._v(" "),s("ul",[s("li",[a._v("优点：可以动态执行，在运行期间根据业务功能动态执行方法、访问属性，最大限度发挥了 Java 的灵活性")]),a._v(" "),s("li",[a._v("缺点：对性能有影响，反射操作总是慢于直接执行 Java 代码")])]),a._v(" "),s("h2",{attrs:{id:"反射机制底层是怎么实现的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#反射机制底层是怎么实现的"}},[a._v("#")]),a._v(" 反射机制底层是怎么实现的？")]),a._v(" "),s("p",[a._v("通过 JVM 加载的 class 文件获取相应类的信息。")]),a._v(" "),s("h2",{attrs:{id:"反射机制在哪里使用到了"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#反射机制在哪里使用到了"}},[a._v("#")]),a._v(" 反射机制在哪里使用到了？")]),a._v(" "),s("p",[a._v("Spring 通过反射创建 Bean 并放入容器中。")]),a._v(" "),s("h2",{attrs:{id:"什么是动态代理-有哪些实现方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是动态代理-有哪些实现方式"}},[a._v("#")]),a._v(" 什么是动态代理，有哪些实现方式？")]),a._v(" "),s("p",[a._v("动态代理指的是在运行时动态生成代理类。一般是为了在不干预实现类的正常业务的情况下，给它添加一些预处理或者后置操作。比如 AOP 就是基于动态代理实现的。")]),a._v(" "),s("p",[a._v("实现动态代理可以使用：")]),a._v(" "),s("ul",[s("li",[a._v("JDK 动态代理（JDKProxy）：通过实现接口得到一个代理类")]),a._v(" "),s("li",[a._v("CGLib：通过继承得到目标类的子类")])])])}),[],!1,null,null,null);t.default=v.exports}}]);